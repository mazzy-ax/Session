
    //
    // https://github.com/mazzy-ax/Session
    // v1.2
    //
    // возвращает true если:
    // пользователь наделен правами локального администратора
    // и текущая сессия была запущена runAsAdministrator
    //
    public static boolean isInRoleAdmin()
    {
        boolean ret;
        container cached = classfactory.globalObjectCache().find('SessionFlags', ['isInRoleAdmin']);

        if( cached )
        {
            [ret] = cached;
        }
        else
        {
            ret = Session::isInRoleAdmin_Slow();

            classfactory.globalObjectCache().insert('SessionFlags', ['isInRoleAdmin'], [ret]);
        }

        return ret;
    }

    //
    // https://github.com/mazzy-ax/Session
    // v1.2
    //
    // возвращает true если:
    // пользователь наделен правами локального администратора
    // и текущая сессия была запущена runAsAdministrator
    //
    // используйте метод isInRoleAdmin(), в котором выполняется кэширование
    //
    public static boolean isInRoleAdmin_Slow()
    {
        anytype perm = new InteropPermission(InteropKind::ClrInterop).assert();

        System.Security.Principal.WindowsIdentity    id = System.Security.Principal.WindowsIdentity::GetCurrent();
        System.Security.Principal.WindowsPrincipal   principal = new System.Security.Principal.WindowsPrincipal(id);
        System.Security.Principal.WindowsBuiltInRole admin = System.Security.Principal.WindowsBuiltInRole::Administrator;

        boolean ret = principal.IsInRole(admin);
        ;

        return ret;
    }
