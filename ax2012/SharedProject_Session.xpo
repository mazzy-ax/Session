Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: Session unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Session
    PROPERTIES
      Name                #Session
      Extends             #xSession
      Origin              #{2D07F000-0000-1000-5365-7373696F6E00}
      LegacyId            #61440
    ENDPROPERTIES
    
    METHODS
      SOURCE #aosPort
        #/// <summary>
        #/// Gets a port of the AOS service.
        #/// </summary>
        #/// <returns>
        #/// A port number of the AOS service.
        #/// </returns>
        #int aosPort()
        #{
        #    ;
        #    if(this.sessionId() != new xSession().sessionId())
        #        return 0;
        #
        #    return Session::getAOSPort();
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class Session extends xSession
        #{
        #
        #}
      ENDSOURCE
      SOURCE #aosClientMode
        #/// <summary>
        #///     Gets the client mode of the AOS service.
        #/// </summary>
        #/// <returns>
        #///     Returns the client mode value of the AOS service.
        #/// </returns>
        #static AOSClientMode aosClientMode()
        #{
        #    return AOSClientMode::Thin;
        #}
      ENDSOURCE
      SOURCE #getAOSInstance
        #/// <summary>
        #/// Gets an AOS instance name.
        #/// </summary>
        #/// <returns>
        #/// An AOS instance name.
        #/// </returns>
        #static server str getAOSInstance()
        #{
        #    SysClientSessions clientSessions;
        #    SysServerSessions serverSessions;
        #    xSession currentSession = new xSession();
        #    SkipAOSValidationPermission skipAOS;
        #    ;
        #
        #    skipAOS = new SkipAOSValidationPermission();
        #    skipAOS.assert();
        #
        #    //BP deviation documented
        #    clientSessions.skipAosValidation(true);
        #
        #    //BP deviation documented
        #    serverSessions.skipAosValidation(true);
        #
        #    // Get the instance name of server session currently connected to.
        #    select Instance_Name from serverSessions
        #        exists join clientSessions where clientSessions.ServerId == serverSessions.ServerId
        #        && clientSessions.SessionId == currentSession.sessionId();
        #
        #
        #    return serverSessions.Instance_Name;
        #}
      ENDSOURCE
      SOURCE #getAOSPort
        #/// <summary>
        #/// Gets a port of the AOS service.
        #/// </summary>
        #/// <returns>
        #/// A port number of the AOS service.
        #/// </returns>
        #static server int getAOSPort()
        #{
        #    SysClientSessions clientSessions;
        #    SysServerSessions serverSessions;
        #    List aosIDList;
        #    xSession currentSession = new xSession();
        #    ListEnumerator enumerator;
        #    SkipAOSValidationPermission skipAOS;
        #    ;
        #    skipAOS = new SkipAOSValidationPermission();
        #    skipAOS.assert();
        #
        #    //BP deviation documented
        #    clientSessions.skipAosValidation(true);
        #    //BP deviation documented
        #    serverSessions.skipAosValidation(true);
        #
        #    select aosId from serverSessions
        #        exists join clientSessions where clientSessions.ServerId == serverSessions.ServerId
        #        && clientSessions.SessionId == currentSession.sessionId();
        #    aosIDList = strSplit(serverSessions.aosId, '@');
        #
        #    enumerator = aosIDList.getEnumerator();
        #    if(enumerator.moveNext() && enumerator.moveNext())
        #        return str2int(enumerator.current());
        #    else
        #        return 0;
        #}
      ENDSOURCE
      SOURCE #isBusinessConnector
        #/// <summary>
        #/// Indicates whether the client kind is a business connector.
        #/// </summary>
        #/// <returns>
        #/// true if the client kind is a business connector; otherwise, false.
        #/// </returns>
        #static client server boolean isBusinessConnector()
        #{
        #    Session session = new Session();
        #    ;
        #    return session.clientKind() == ClientType::COMObject;
        #}
        #
      ENDSOURCE
      SOURCE #isInRoleAdmin
        #//
        #// https://github.com/mazzy-ax/Session
        #// v1.1
        #//
        #// возвращает true если:
        #// пользователь наделен правами локального администратора
        #// и текущая сессия была запущена runAsAdministrator
        #//
        #public static boolean isInRoleAdmin(boolean skipCache = false)
        #{
        #    boolean ret;
        #    container cached;
        #
        #    if( !skipCache )
        #    {
        #        cached = classfactory.globalObjectCache().find('SessionFlags', ['isInRoleAdmin']);
        #    }
        #
        #    if( cached )
        #    {
        #        [ret] = cached;
        #    }
        #    else
        #    {
        #        ret = Session::isInRoleAdminImpl();
        #
        #        classfactory.globalObjectCache().insert('SessionFlags', ['isInRoleAdmin'], [ret]);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInRoleAdminImpl
        #//
        #// https://github.com/mazzy-ax/Session
        #// v1.1
        #//
        #// возвращает true если:
        #// пользователь наделен правами локального администратора
        #// и текущая сессия была запущена runAsAdministrator
        #//
        #// используйте метод isInRoleAdmin(), в котором выполняется кэширование
        #//
        #protected static boolean isInRoleAdminImpl()
        #{
        #    anytype perm = new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    System.Security.Principal.WindowsIdentity    id = System.Security.Principal.WindowsIdentity::GetCurrent();
        #    System.Security.Principal.WindowsPrincipal   principal = new System.Security.Principal.WindowsPrincipal(id);
        #    System.Security.Principal.WindowsBuiltInRole admin = System.Security.Principal.WindowsBuiltInRole::Administrator;
        #
        #    boolean ret = principal.IsInRole(admin);
        #    ;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isServer
        #/// <summary>
        #/// Indicates whether the client kind is a server.
        #/// </summary>
        #/// <returns>
        #/// true if the client kind is a server; otherwise, false.
        #/// </returns>
        #static client server boolean isServer()
        #{
        #    Session session = new Session();
        #    ;
        #    return session.clientKind() == ClientType::Server;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SessionPerfTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SessionPerfTest
    PROPERTIES
      Name                #SessionPerfTest
      Extends             #Object
      Origin              #{7BD82EBE-0234-4C5E-A8B5-C77A77A4A158}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/Session
        #// v1.1
        #//
        #class SessionPerfTest extends Object
        #{
        #
        #}
      ENDSOURCE
      SOURCE #testIsInRoleAdmin_Cached
        #public void testIsInRoleAdmin_Cached(int iterations)
        #{
        #    SysStopwatch    timer       = SysStopwatch::startNew();
        #    boolean         isAdmin;
        #    int             i;
        #    ;
        #
        #    for( i=1; i<=iterations; i++ )
        #    {
        #        isAdmin = Session::isInRoleAdmin();
        #    }
        #
        #    info(strfmt("%1: %2, %3", xGlobal::clientKind(), funcname(), timer.elapsedWide()));
        #}
      ENDSOURCE
      SOURCE #testIsInRoleAdmin_Impl
        #public void testIsInRoleAdmin_Impl(int iterations)
        #{
        #    SysStopwatch    timer       = SysStopwatch::startNew();
        #    boolean         isAdmin;
        #    int             i;
        #    ;
        #
        #    for( i=1; i<=iterations; i++ )
        #    {
        #        isAdmin = Session::isInRoleAdmin(true);
        #    }
        #
        #    info(strfmt("%1: %2, %3", xGlobal::clientKind(), funcname(), timer.elapsedWide()));
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SessionPerfTest onClient = ClassFactory::makeObjectOnClient(classnum(SessionPerfTest));
        #    SessionPerfTest onServer = ClassFactory::makeObjectOnServer(classnum(SessionPerfTest));
        #
        #    int iterations = 10000;
        #    ;
        #
        #    onClient.testIsInRoleAdmin_Cached(iterations);
        #    onClient.testIsInRoleAdmin_Impl(iterations);
        #
        #    onServer.testIsInRoleAdmin_Cached(iterations);
        #    onServer.testIsInRoleAdmin_Impl(iterations);
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : Session unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #Session
  SHARED
  PROPERTIES
    Name                #Session
    Origin              #{58D30312-E005-4EE1-B8B2-707E80A07165}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 61440
      NODETYPE 329
      NAME #Session
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 1024217
      NODETYPE 329
      NAME #SessionPerfTest
    ENDNODE
  ENDPROJECT
  

***Element: END
